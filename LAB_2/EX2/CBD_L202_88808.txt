// NMEC: 12345
#1
db.rest.find()
#2
db.rest.find({},{"_id":1,"nome":1,"localidade":1,"gastronomia":1})
#3
db.rest.find({},{"_id":0,"nome":1,"localidade":1,"gastronomia":1,"address.zipcode":1})
#4
db.rest.aggregate([{$match:{"localidade":"Bronx"}},{$group : {_id : "$localidade", total : {$sum : 1}}}])
#5
db.getCollection('rest').find({"localidade":"Bronx"}).limit(5).pretty()
#6
db.rest.find({ "grades.score": {$gte:85} })
#7
// In this version I summed all the scores 
db.getCollection('rest').aggregate([
    
        {$group: {
            _id: {
                id: "$_id",
                Localidade:"$localidade",
                
                TotalGrade: {
                "$sum": "$grades.score"
                }
            },
            
            }
        },
        {$match:{"_id.TotalGrade":{$gte:80,$lte:100}}}

    
])
//This is the correct version
db.getCollection('rest').find({"grades":{$elemMatch:{score:{$gte:80,$lte:100}} }})

#8
// To evaluate a specific element in the array we pass the index like this "address.coord.index_number"
db.getCollection('rest').find({"address.coord.0":{$lt:-95.7}})
#9
db.getCollection('rest').find({"address.coord.0":{$lt:-65},"grades.score":{$gt:70},"gastronomia":{$ne:"American"}})
#10
db.getCollection('rest').find({nome:/^Wil/},{restaurant_id:1,nome:1,localidade:1,gastronomia:1})
#11
db.getCollection('rest').find({localidade:"Bronx",$or: [{gastronomia: "American"}, {gastronomia: "Chinese"}]},{nome:1,localidade:1,gastronomia:1})
#12
db.getCollection('rest').find({$or: [{localidade: "Staten Island"}, {localidade: "Queens"}, {localidade: "Bronx"}, {localidade: "Brooklyn"}]},{restaurant_id:1,nome:1,localidade:1,gastronomia:1})
#13
db.getCollection('rest').find({"grades.score":{$not: {$gt: 3}}},{nome:1,localidade:1,"grades.score":1,gastronomia:1})
#14
//Use elemMatch to check each element for every condition
db.getCollection('rest').find({"grades":{$elemMatch:{score:10,grade:"A",date:ISODate("2014-08-11T00:00:00Z")} }})
#15
db.getCollection('rest').find({$and:[{"grades.1.grade":"A","grades.1.date":ISODate("2014-08-11T00:00:00Z")}]},{restaurant_id:1,nome:1,"grades.score":1})
#16
db.getCollection('rest').find({$and:[{"address.coord.1":{$gt:42,$lte:52}}]},{restaurant_id:1,nome:1,address:1})
#17
db.getCollection('rest').find({},{nome:1}).sort({nome:1})
#18
db.getCollection('rest').find({},{nome:1,gastronomia:1,localidade:1}).sort({gastronomia:1,localidade:-1})
#19
db.getCollection('rest').find({$and:[{localidade:"Brooklyn","grades.grade":"A",gastronomia:{$ne:"American"}}]},{nome:1,gastronomia:1,localidade:1,grades:1}).sort({gastronomia:1})
#20
db.rest.aggregate([{$group : {_id : "$localidade", total : {$sum : 1}}}])
#21
//check with teacher
db.rest.aggregate([
    
    {$group: {
        _id: {
            id: "$_id",
            
           avgScore: { $avg: "$grades.score" }
        },
        
    }
    },
    {$match:{"_id.avgScore":{$gt:30}}}

    
])
#22
db.rest.aggregate([
    
        {$group: {
            _id: {
                id: "$_id",
                Localidade:"$localidade",
                gastronomia:"$gastronomia",
                coord:"$address.coord",
                TotalScore: {
                "$sum": "$grades.score"
                }
            },
            
            }
        },
        {$match:{"_id.TotalScore":{$gt:70},"_id.gastronomia":"American","_id.coord.0":{$lt:-65}}}

    
])
#23
db.rest.aggregate([{$group : {_id : "$gastronomia", total : {$sum : 1}}},{$sort:{"total":-1}}])
#24
db.rest.aggregate([{$group : {_id : {_id:"$address.rua",gastronomia:"$gastronomia"}}},        {$match:{"_id._id":"Flatbush Avenue"}},{$count: "total_restaurants"}])
#25

db.rest.aggregate(
   [
     {
       $group:
         {
           _id:"$address.rua" ,
           count: { $sum: 1 }
         }
     }
   ]
)
#26 Apresente o restaurantes ordenados por ordem crescente do score cumulativo 
db.rest.aggregate([
        {$group: {
            _id: {
                id: "$_id",
                localidade: "$localidade",
                
                total_score: {
                $sum: "$grades.score"
                }
            },   
            }
        },
        {$sort:{"_id.total_score":-1}} 
])
#27 Apresente o restaurante que teve o score cumulativo minimo
db.rest.aggregate([
    {$group: {
        _id: {
            id: "$_id",
            
           total_score: { $sum: "$grades.score" }
            },  
        }   
    },
    {$sort:{"_id.total_score":1}}, 
    {$limit: 1}
])
#28 Apresente os restaurantes ordenados por ordem descrescente do score cumulativo
db.getCollection('rest').aggregate([
    
        {$group: {
            _id: {
                id: "$_id",
                Localidade:"$localidade",
                
                TotalGrade: {
                "$sum": "$grades.score"
                }
            },
            
            }
        },
        {$sort:{"_id.TotalGrade":-1}}
    
])
#29 Liste o nome e as avaliações dos restaurantes que obtiveram uma avaliação com um grade "A" e um score 10 entre a data "2014-10-01T00: 00: 00Z" e a data "2014-10-09T00: 00: 00Z"
db.getCollection('rest').find({"grades":{$elemMatch:{score:10,grade:"A",date:{$gte:ISODate("2014-10-01T00:00:00Z"),$lte:ISODate("2014-10-09T00:00:00Z")}} }})
#30
Liste todos os restaurantes ordenados pelo nome da rua em decrescente.
db.rest.find().sort( {"address.rua": -1} )
